export type Tournament = { // TODO - Make homescreen use this
    name: string;
    isComplete: boolean;
}

export type Fencer = {
    id?: number; // id is auto-generated by sqlite
    fname: string;
    lname: string;
    nickname?: string;

    erating: string | 'U' | 'E' | 'D' | 'C' | 'B' | 'A'; // TODO Ratings should prob be their own type
    eyear: number;
    frating: string | 'U' | 'E' | 'D' | 'C' | 'B' | 'A';
    fyear: number;
    srating: string | 'U' | 'E' | 'D' | 'C' | 'B' | 'A';
    syear: number;
};

export type Referee = {
    id: number;
    firstName: string;
    lastName: string;
    nickname?: string;
};

export type RoundData = {
    roundType: 'Pools' | 'DE';
    promotion?: number;
    poolsOption?: 'promotion' | 'target';
    targetBracketSize?: number;
    eliminationFormat?: 'single' | 'double' | 'compass';
};

export type Event = {
    id: number;
    tname: string;
    weapon: string;
    gender: string;
    age: string;
    class: string;
    seeding: string;
};

export type DEBracketMatch = {
    fencerA: Fencer | undefined;
    fencerB: Fencer | undefined;
    round: number;      // Round number (1 = first round, etc.)
    matchIndex: number; // The index within that round
    winner?: Fencer;
    scoreA?: number;
    scoreB?: number;
};

// Import DEBracketData from your RoundAlgorithms (if needed)
import { DEBracketData } from '../utils/RoundAlgorithms';

export type RootStackParamList = {
    HomeTabs: undefined;
    EventManagment: { tournamentName: string };
    EventSettings: { event: Event; onSave: (updatedEvent: Event) => void };
    RefereeModule: {
        boutIndex: number;
        fencer1Name: string;
        fencer2Name: string;
        currentScore1: number;
        currentScore2: number;
        onSaveScores: (score1: number, score2: number) => void;
        EventManagment: { tournamentName: string };
        EventSettings: { event: Event; onSave: (updatedEvent: Event) => void };
        RefereeModule: {
            boutIndex: number;
            fencer1Name: string;
            fencer2Name: string;
            currentScore1: number;
            currentScore2: number;
            onSaveScores?: (score1: number, score2: number) => void;
        };
        PoolsPage: {
            event: Event;
            currentRoundIndex: number;
            fencers: Fencer[];
            poolCount: number;
            fencersPerPool: number;
        };
        BoutOrderPage: {
            poolFencers: Fencer[];
            updatedBout?: { boutIndex: number; score1: number; score2: number };
        };
        DEBracketPage: { event: Event; currentRoundIndex: number; bracketData: DEBracketData };
        HostTournament: undefined;
        JoinTournament: undefined;
        BracketViewPage: { bracketData: DEBracketData; event: Event };
    };
};
